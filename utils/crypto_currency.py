import json
import os
import random
import datetime
from utils.json_utils import *
os.chdir("/home/loona/programming/Kryptonite-Bot")

class CryptoCurrency:
    def __init__(self, currency:dict=None):
        """
            Initializes a crypto currency.

            Cryptocurrencies are stored in the db/crypto_currencies.json file. on init, the dict pointing to the
            currency in the json file is passed in as an argument. If none is given, a new currency will be generated
            instead.

            Upon generation, several properties will be generated, then saved:
                name: the name of the crypto currency generated by a name generator
                creation date: The day the crypto currency was created accurate to the hour.
                value: Value of the currency
                values: history of all values the currency had including the times it had them.
                Vmax_mag: The maximum magnitude the value can fluctuate by
                threshold: the likelyhood of the value decreasing in percent range(0.0,100.0) exclusively
                Tmax_mag: the maximum magnitude the threshold can fluctuate by.

            todo:
                maybe allow self vars of all the json indexes, and saving sets all those values to the dict and saves


        """
        if currency is None: # if there was no argument given, it creates a new currency
            # creates the CryptoCurrency dict
            self.currency = {}

            self.currency["creation date"] = str(datetime.datetime.now().replace(minute=0, microsecond=0))
            self.currency["name"] = CryptoCurrency.name_generator() # uses a generator to generate a random name

            self.currency["value"] = random.uniform(1.0, 50.0)
            self.currency["Vmax_mag"] = max(
                0.01,
                random.uniform(0.25, 1.0)*(self.currency["value"]/20)
            )

            self.currency["threshold"] = 50.0
            self.currency["Tmax_mag"] = 1.0

            self.currency["values"] = []
            self.currency["values"].append({
                "date": self.currency["creation date"],
                "value": self.currency["value"]
            })

            # simulate the currency?
            # save the currency.
            self.save()

        else: # otherwise loads up the currency from the dict given
            self.currency = currency # we only load in the dict as it makes writing changes easier

    @staticmethod
    def name_generator()->str:
        """
            Generates a random name.

            Loads up data from db/crypto_names.json and randomly chooses a prefix and suffix and returns them.
        """
        names = load_json("db/crypto_names.json")
        prefix = random.choice(names["prefixes"])
        suffix = random.choice(names["suffixes"])
        return prefix+suffix

    def save(self):
        """
            Writes data to the database.

            Loads up the crypto_currency.json file and looks for the currency that shares the same name as self,
            then writes the new data to the file.
        """
        db = load_json("db/crypto_currencies.json") # loads up the db containing all currencies

        for i in range(len(db["currencies"])): # cycles through all of them to find the matching one by name
            if db["currencies"][i]["name"] == self.currency["name"]:
                db["currencies"][i] = self.currency
                update_json("db/crypto_currencies.json", db)
                return
        db["currencies"].append(self.currency) # if the currency is not found, add it.
        db["count"] += 1 # updates the number of crypto currencies stored in the database
        update_json("db/crypto_currencies.json", db)
        return

    def cache(self):
        """
            Caches the value of a cryptocurrency.

            Used to keep track of the commonly used data of a cryptocurrency.

            todo:
                work out the details
        """


    def delete(self):
        """
            Deletes a crypto currency.

            Usually used when the currency's value drops below a certain point.

            Looks through the crypto currencies json and deletes the right entry as well as decrement the counter.
        """
        db = load_json("db/crypto_currencies.json")  # loads up the db containing all currencies

        for i in range(len(db["currencies"])):
            if db["currencies"][i]["name"] == self.currency["name"]:
                db["currencies"].pop(i)
                db["count"] -=1
                update_json("db/crypto_currencies.json", db)
                return
        #return # maybe deleter method?

    def simulate(self): return

    def Tfluctuate(self): return

    def Vfluctuate(self): return

    def display_history(self): return

db = load_json("db/crypto_currencies.json")
new_crypto = CryptoCurrency(db["currencies"][0])
print(new_crypto.currency)

"""db = load_json("db/crypto_currencies.json")
for currency in db["currencies"]:
    crypto = CryptoCurrency(currency)
    crypto.delete()"""