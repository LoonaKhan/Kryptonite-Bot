currency class:

  every round, Vfluc_chance is rolled and compared to threshold. if it is higher, the value increases.
  if not, it decreases. if they are equal nothing happens. afterward the threshold is modified,
  if the value increased, the threshold is more likely to decrease to allow the value to rise more
  easily, and vice versa. threshold increases by Tfluc_chance which determines whether it increases or
  decreases (randint(-1,2) for increase and randint(-2,1) for decrease) while Tmag determines
  the magnitude of the increase.

  For fluctuating the values, both threshold and value work similarly. there is a max_mag for both
  and a calculated mag which is randomly a range from (0,max_mag) inclusively. these are then added
  to value and threshold respectively.

  for storing:
  normally, each round, existing currencies are loaded from their json file and simulated.
  afterward, their json files are written to be saved. cache file? stored in memory?

  caching:
  maybe keep a dict in memory and add the details to that. only value, creation date, previous values and name.
  previous values are stored by the hour.

  
  attributes:
      value: value of the currency variable float()
        if lower than lowpoint, delete it

      Vfluc_chance: randint compared to threshold range(0,100) # not stored

      Vmax_mag: the maximum amount the value can fluctuate by. variable float()

      Vmag: how much the value flutuates by per cycle. variable float(0,Vmax_mag) # not stored


      threshold: how likely the currency is to in/decrease int(1-99)

      Tfluc_chance: randint determining whether threshold increases or decreases range(-2,2) # not stored

      Tmag: randint for how much the threshold fluctates range() # not stored

      Tmax_mag: max value the threshold can fluctuate by variable float()


  methods:
      simulate()
        rolls a dice for chance it will increase.
        if chance > threshold:
            roll a number for Tfluc_chance. more biased to decrease
            add the magnitude of Tfluc_chance to a number between(0, Tmax_mag) to threshold

            determine a value between (0, Vmax_mag) and add to value
            modify Vmax_mag. randomly between 0.001 and 0.01 cents?     grow gradually over time unaffected by the currency value

      fluctuate(sign[-1,1])

      save()

      cache()

      delete()

      init()


Should a crypto be kept in cache after deletion?
we could set its value to 0
or it could stay alive? but how do you buy it?


caching:
    we write every minute, so whats the point?
    well, ppl might call commands even more,
    so we can hold the data in ram
    {
        "name":""
        "value": 0.53
        "creation date": ""
        "values": [ #only the last 24 hrs, so 24 entries.
            "date": ""
            "value":
        ]
    }
    unload currencies after use
Instead of random, should the currencies use perlin noise and a seed

take cmd arguments via args and pass them into a python script?

backup script


user class:
    # loads up a file in a db/users/[user_id].json
    standard money: float
    holdings:list[dict{str, float}]
        [
            {"crypto_name": 100} // indexes are the number of shares
        ]
    last accessed: str(datetime) // when their file was last accessed
    bank:int
    account: dict{
        tax_free: bool
        holdings:list[dict{str, float}]
        num_holdings:int
    }

    init() // takes the user id and loads up their object from the json
    verify_holdings() // verifies if all currencies in the user's account are still alive
    check_last_accessed() // assigns a new datetime on init
    trade() // when buying/selling, modify the holdings
    limit() // makes sure bank or wallet does not exceed the max(?)

    wallet is used for daily, gambling etc.
    playing with crypto and transfers etc are all with the bank
    when buying/selling crypto, u choose which account.

trading:
    command
    loads up user instance
    loads up currency instance
    verifies the user has enough
    currency.trade() // calculates the purchase and effect on the currency
    user.trade() // modifies the user's holdings



=============================================
UID's are in order.

buy/sells: (currency)
  seperate functions.
  increase or decrease marginally by the nunber of shares purchased
    trade constant:
      every x shares bought increases the value by 1 follar
  increase/decrease the number of coins bought

buy/sell (user)
  calculate the value of the purchase
    num_shares*stock_price(cached)
    add or subtract those coins from the user
    add or subtract the user's balance

    verifies if the user has enough shares/money to trade the desired amount

buy/sell (bot)
  retrieves the value of the specified currency
  just calls the other functions
  max trades: 1000()
  once per minute only
  prints out the info

  verifies if the account and currency exist

  verifies if the user has traded a minute ago.


transfer:
  subtract ur amount of a cash
  give it to someone else

max user value. then either taxes or cant increase.

put everything into kryptonite package
  except db
  main.py sets directory to src to access db?
  index.js does the same?


trade constant is refreshed every minute along with cache

accounts:
  tfa:
    can deposit X daily. can trade a limited amount(max amount of dollars spent). max of 1000 shares. 1 purchase/min
    no taxes

  reg:
    deposit 50k a day. only limit on trades is 1000 shares per purchase. 1 purchase a min
      requency stored as a datetime object?
        self.user.last_accessed for the datetime object
      or we use discords thing
    12% on each purchase


js webpages:
  just a base currency webpage and displays data from the database.
  user data webpage
  page showing all active currencies the user can choose from

make this all async.
method called every function that caches and refreshes constants
make sure everything is >0
also save after every function
keep it within the max balance
function to modify the constants. bot command
buy/selling
    for every X shares, we process the value of the stock.
    then process the next X shares.

caching:
    do we use the cached value of a stock or the db value?
    maybe upon load, we look for the currency in cache and replace value with the cached value.